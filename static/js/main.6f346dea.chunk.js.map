{"version":3,"sources":["utils/serviceWorkerMessenger.js","App.js","components/PeopleTable.js","components/UserCreationForm.js","actions/getPeople.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","getSelectedPeople","sendPersonSelectedMessage","sendPersonUnselectedMessage","navigator","serviceWorker","ready","then","Promise","resolve","reject","controller","messageChannel","MessageChannel","port1","onmessage","event","data","error","postMessage","eventType","port2","person","App","props","_this","Object","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","refreshPeople","arguments","length","undefined","window","location","reload","GetPeople","people","setState","catch","result","console","log","setTimeout","personSelected","assign","state","find","p","Id","selected","personUnselected","sortPeople","sortBy","sortDescending","sortedDescending","fetch","concat","global","config","apiUrl","skip","take","headers","Content-Type","response","json","selectedPeople","prevState","map","element","sortedBy","pageForward","newSkip","pageBackward","deleteUser","personId","method","updateUser","personToUpdate","body","JSON","stringify","onTableEdited","change","previousState","previousPeople","indexOfPreviousPerson","previousPerson","index","newPerson","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","display","_components_PeopleTable__WEBPACK_IMPORTED_MODULE_8__","sortByEmail","sortByName","_components_UserCreationForm__WEBPACK_IMPORTED_MODULE_9__","Component","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","PeopleTable","_ref","arrow","nameHeader","emailHeader","width","cursor","backgroundColor","onClick","key","Email","onChange","Name","target","value","type","defaultValue","Age","Balance","Address","role","aria-label","justifyContent","UserCreationForm","createPerson","handleInput","_this2","inputStyle","marginTop","marginLeft","name","_utils_serviceWorkerMessenger__WEBPACK_IMPORTED_MODULE_0__","getPeople","register","isLocalhost","Boolean","hostname","match","URL","process","href","origin","addEventListener","swUrl","contentType","get","status","indexOf","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","r","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_3__","_serviceWorker__WEBPACK_IMPORTED_MODULE_4__","ReactDOM","render","document","getElementById","err"],"mappings":"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","file":"static/js/main.6f346dea.chunk.js","sourcesContent":["/// Ensure service worker is ready to be interacted with and then ask it for the cache of selected people\r\nexport const getSelectedPeople =  function () {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return new Promise(function(resolve, reject){\r\n            if(navigator.serviceWorker.controller) {\r\n                // Create a Message Channel\r\n                var messageChannel = new MessageChannel();\r\n                    \r\n                // Handler for recieving message reply from service worker\r\n                messageChannel.port1.onmessage = function(event){\r\n                    if(event.data.error){\r\n                        reject(event.data.error);\r\n                    }else{\r\n                        resolve(event.data);\r\n                    }\r\n                };\r\n\r\n                // Send message to service worker along with port for reply\r\n                navigator.serviceWorker.controller.postMessage({\r\n                    eventType: 'getSelectedPeople'\r\n                }, [messageChannel.port2]);\r\n            } else {\r\n                reject('Controller not ready');\r\n            }\r\n            \r\n        });\r\n    });\r\n}\r\n\r\n/// Tell service worker a new person has been selected\r\nexport const sendPersonSelectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personSelected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n    \r\n}\r\n\r\n/// Tell service worker a person has been unselected\r\nexport const sendPersonUnselectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personUnselected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { getSelectedPeople, sendPersonSelectedMessage, sendPersonUnselectedMessage } from './utils/serviceWorkerMessenger'\r\nimport PeopleTable from './components/PeopleTable'\r\nimport UserCreationForm from './components/UserCreationForm'\r\nimport GetPeople from './actions/getPeople'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            people: undefined,\r\n            sortedBy: 'name',\r\n            sortedDescending: false,\r\n            skip: 0,\r\n            take: 10\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshPeople();\r\n    }\r\n\r\n    /// This works as the initial get of all people and for refreshing the table after additions and deletions\r\n    refreshPeople = (refreshPage = false) => {\r\n        if (refreshPage === true) {\r\n            window.location.reload(false); \r\n        }\r\n        GetPeople().then((people) => {\r\n            this.setState({\r\n                people: people\r\n            });\r\n        }).catch((result) => {\r\n            /// Service worker controller either hasn't registered yet or won't register (Hard refresh) so start over again and refresh page just to be safe \r\n            console.log(result);\r\n            setTimeout(() => { this.refreshPeople(true) }, 1000);\r\n        });;\r\n    }\r\n\r\n    /// Component handler for marking a person as selected using utility method from serviceWorkerMessenger\r\n    personSelected = (person) => {\r\n        sendPersonSelectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = true;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    /// Component handler for marking a person as selected using utility method from serviceWorkerMessenger\r\n    personUnselected = (person) => {\r\n        sendPersonUnselectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = false;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    /// Make call to get people but with sorting parameters, use whatever skip and take were set last\r\n    sortPeople = (sortBy) => {\r\n        const sortDescending = this.state.sortedDescending === true ? false : true;\r\n\r\n        fetch(`${global.config.apiUrl}/people?sortBy=${sortBy}&sortDescending=${sortDescending}&skip=${this.state.skip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        sortedBy: sortBy,\r\n                        sortedDescending: prevState.sortedBy !== sortBy ? false : sortDescending\r\n                    }\r\n                });\r\n            }).catch((result) => {\r\n                console.log(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /// Get next 10 people\r\n    pageForward = () => {\r\n        const newSkip = this.state.skip + 10;\r\n\r\n        fetch(`${global.config.apiUrl}/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        skip: newSkip\r\n                    };\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /// Get last 10 people, do not allow the user to go back from 0\r\n    pageBackward = () => {\r\n        const newSkip = this.state.skip === 0 ? 0 : this.state.skip - 10;\r\n\r\n        fetch(`${global.config.apiUrl}/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState({\r\n                    people: result.map((person) => {\r\n                        person.selected = selectedPeople.find((element) => {\r\n                            return element.Id === person.Id;\r\n                        });\r\n                        return person;\r\n                    }),\r\n                    skip: newSkip\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /// Delete a user and refresh the table\r\n    deleteUser = (personId) => {\r\n        fetch(`${global.config.apiUrl}/people/${personId}`, {\r\n            method: 'DELETE'\r\n        }).then((result) => {\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    /// Update a users details, don't refresh the table, if something goes wrong, handle it in the catch.\r\n    updateUser = (personId) => {\r\n        const personToUpdate = this.state.people.find(person => person.Id === personId);\r\n\r\n        fetch(`${global.config.apiUrl}/people/${personId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(personToUpdate),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).catch((result) => {\r\n            console.log(result);\r\n        });\r\n    }\r\n\r\n    /// Handle all values in the table being edited\r\n    onTableEdited = (person, change) => {\r\n        this.setState((previousState) => {\r\n            const previousPeople = previousState.people;\r\n\r\n            let indexOfPreviousPerson = 0;\r\n            const previousPerson = previousPeople.find((element, index) => { \r\n                indexOfPreviousPerson = index;\r\n                return element.Id === person.Id\r\n            });\r\n\r\n            const newPerson = Object.assign({}, previousPerson, change);\r\n            previousPeople[indexOfPreviousPerson] = newPerson;\r\n\r\n            return Object.assign({}, previousState);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <div>Tech Test</div>\r\n                </header>\r\n                <div style={{ display: 'flex' }}>\r\n                    <div>\r\n                        <PeopleTable \r\n                            people={this.state.people} \r\n                            personSelected={this.personSelected} \r\n                            personUnselected={this.personUnselected} \r\n                            sortPeople={this.sortPeople}\r\n                            sortByEmail={this.sortByEmail} \r\n                            sortByName={this.sortByName} \r\n                            sortedBy={this.state.sortedBy}\r\n                            sortedDescending={this.state.sortedDescending}\r\n                            pageForward={this.pageForward} \r\n                            pageBackward={this.pageBackward}\r\n                            deleteUser={this.deleteUser}\r\n                            onTableEdited={this.onTableEdited}\r\n                            updateUser={this.updateUser} />\r\n                    </div>\r\n                    <UserCreationForm refreshPeople={this.refreshPeople} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PeopleTable = function({ people, personSelected, personUnselected, sortPeople, sortedBy, sortedDescending, pageForward, pageBackward, deleteUser, onTableEdited, updateUser }) {\r\n\r\n    const arrow = sortedDescending === true ? <span>&#8595;</span> : <span>&#8593;</span>;\r\n\r\n    const nameHeader = sortedBy === 'name' ? <span>Name {arrow}</span> : <span>Name</span>;\r\n    const emailHeader = sortedBy === 'email' ? <span>Email {arrow}</span> : <span>Email</span>;\r\n\r\n    return (\r\n        <div style={{ width: 1400 }}>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th style={{ cursor: 'pointer', backgroundColor: 'LightGray'  }} onClick={() => { sortPeople('name') }}>{nameHeader}</th>\r\n                        <th>Age</th>\r\n                        <th>Balance</th>\r\n                        <th style={{ cursor: 'pointer', backgroundColor: 'LightGray'  }} onClick={() => { sortPeople('email') }}>{emailHeader}</th>\r\n                        <th>Address</th>\r\n                    </tr>\r\n                    {\r\n                        people === undefined ? null :\r\n                        people.map((person) => {\r\n                            return (\r\n                                <tr key={person.Email}>\r\n                                    <td><input onChange={event => onTableEdited(person, { Name: event.target.value })} type='text' defaultValue={person.Name}></input></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Age: event.target.value })} type='number' defaultValue={person.Age} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Balance: event.target.value })} type='number' defaultValue={person.Balance} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Email: event.target.value })} type='text' defaultValue={person.Email} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Address: event.target.value })} type='text' defaultValue={person.Address} /></td>\r\n                                    <td>\r\n                                        {\r\n                                            person.selected ? <span style={{ cursor: 'pointer'  }} onClick={() => { personUnselected(person) }} role='img' aria-label='Minus sign'>&#10134;</span> : \r\n                                                <span style={{ cursor: 'pointer'  }} onClick={() => { personSelected(person)}} role='img' aria-label='Plus sign'>&#10133;</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td style={{ cursor: 'pointer'  }} onClick={() => updateUser(person.Id)}>Update User</td>\r\n                                    <td style={{ cursor: 'pointer'  }} onClick={() => deleteUser(person.Id)}>Delete User</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                <div style={{ cursor: 'pointer'  }} onClick={pageBackward}>\r\n                    &#8592; Page Backward\r\n                </div>\r\n                <div style={{ cursor: 'pointer'  }} onClick={pageForward}>\r\n                     Page Forward &#8594;\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nPeopleTable.propTypes = {\r\n    people: PropTypes.array,\r\n    personSelected: PropTypes.func.isRequired,\r\n    personUnselected: PropTypes.func.isRequired,\r\n    sortPeople: PropTypes.func.isRequired,\r\n    sortedBy: PropTypes.string.isRequired,\r\n    sortedDescending: PropTypes.bool.isRequired,\r\n    pageForward: PropTypes.func.isRequired,\r\n    pageBackward: PropTypes.func.isRequired,\r\n    deleteUser: PropTypes.func.isRequired,\r\n    onTableEdited: PropTypes.func.isRequired,\r\n    updateUser: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PeopleTable;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass UserCreationForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            Name: '',\r\n            Email: '',\r\n            Address: '',\r\n            Balance: 0,\r\n            Age: 0\r\n        }\r\n\r\n        this.refreshPeople = props.refreshPeople;\r\n    }\r\n\r\n    /// Create a new person and refresh the table\r\n    createPerson = () => {\r\n        fetch(`${global.config.apiUrl}/people`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).then((result) => {\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    /// Handle input from user into form\r\n    handleInput = (change) => {\r\n        this.setState((previousState) => {\r\n            return Object.assign({}, previousState, change);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const inputStyle = {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginTop: 5\r\n        };\r\n\r\n        return (\r\n            <div style={{ marginTop: 50 }}>\r\n                <span>User Creation Form</span>\r\n                <div>\r\n                    <label style={inputStyle}>\r\n                        Name:\r\n                        <input onChange={event => this.handleInput({ Name: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"name\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Email:\r\n                        <input onChange={event => this.handleInput({ Email: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"email\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Address:\r\n                        <input onChange={event => this.handleInput({ Address: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"address\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Balance:\r\n                        <input onChange={event => this.handleInput({ Balance: event.target.value })} style={{ marginLeft: 5 }} type=\"number\" name=\"balance\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Age:\r\n                        <input onChange={event => this.handleInput({ Age: event.target.value })} style={inputStyle} type=\"number\" name=\"age\" />\r\n                    </label>\r\n                    <input type=\"submit\" name=\"name\" onClick={this.createPerson} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nUserCreationForm.propTypes = {\r\n    refreshPeople: PropTypes.func.isRequired\r\n};\r\n\r\nexport default UserCreationForm;","import { getSelectedPeople } from '../utils/serviceWorkerMessenger'\r\n\r\nconst getPeople = () => {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return fetch('https://tech-test.azurewebsites.net/people', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((people) => {\r\n            return getSelectedPeople().then((selectedPeople) => {\r\n                return people.map((person) => {\r\n                    person.selected = selectedPeople.find((element) => {\r\n                        return element.Id === person.Id;\r\n                    });\r\n                    return person;\r\n                });\r\n            });\r\n        });\r\n    });\r\n    \r\n}\r\n\r\nexport default getPeople;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nglobal.config = {};\n\nfetch(`config.json`)\n  .then(response => response.json())\n  .then(json => {\n    global.config = json;    \n    ReactDOM.render(<App />, document.getElementById('root'));\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\n\nserviceWorker.register();\n"],"sourceRoot":""}