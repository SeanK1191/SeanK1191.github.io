{"version":3,"sources":["services/steam.js","steamCurrentlyPlayed.jsx","hooks/steamHooks.js","steamMostRecentGame.jsx","App.js","serviceWorker.js","index.js"],"names":["apiKey","process","convertSteamStatusToString","userStatus","playerSummary","userSummary","undefined","gameid","gameextrainfo","User","userId","a","async","endpoint","fetch","response","json","data","players","personastate","games","SteamCurrentlyPlayed","props","steamSummary","steamId","useState","steamStatus","setSteamStatus","useEffect","getPlayerSummary","interval","setInterval","_","clearInterval","useSteamStatus","steamDetails","id","Typography","variant","align","gutterBottom","SteamMostRecentGame","mostRecentGameInfo","name","steamMostRecentlyPlayed","setSteamMostRecentlyPlayed","mostRecentlyPlayedGame","getMostRecentlyPlayed","mostRecentGame","useSteamMostRecentlyPlayed","App","state","hasError","error","info","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2ce5f32.chunk.js","sourcesContent":["const userInterface = 'https://young-tor-50055.herokuapp.com/ISteamUser';\r\nconst playerInterface = 'https://young-tor-50055.herokuapp.com/IPlayerService';\r\nconst version1 = 'v1';\r\nconst version2 = 'v2';\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst convertSteamStatusToString = (userStatus, playerSummary) => {\r\n    let userSummary = '';\r\n    switch (userStatus) {\r\n        case 1:\r\n            if (playerSummary.gameid !== undefined) {\r\n                userSummary = `Playing ${playerSummary.gameextrainfo}`;\r\n            } else {\r\n                userSummary = 'User is Online.'\r\n            }\r\n            \r\n            break;\r\n        case 3: \r\n            userSummary = 'User is Away';\r\n            break;\r\n        case 0: \r\n            userSummary = 'User is Offline';\r\n            break;\r\n        default:\r\n            userSummary = 'User is nothing';\r\n            break;\r\n    }\r\n    return userSummary;\r\n}\r\n\r\nconst User = {\r\n    GetUserSummary: async (userId) => {\r\n        let playerSummary = {};\r\n        try {\r\n            const endpoint = `${userInterface}/GetPlayerSummaries/${version2}?key=${apiKey}&steamids=${userId}`;\r\n            const response = await fetch(endpoint);\r\n            const data = await response.json();\r\n            playerSummary = data.response.players[0];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n\r\n        playerSummary.personastate = convertSteamStatusToString(playerSummary.personastate, playerSummary);\r\n       \r\n        return playerSummary;\r\n    },\r\n    GetUserMostRecentGame: async (userId) => {\r\n        try {\r\n            const endpoint = `${playerInterface}/GetRecentlyPlayedGames/${version1}?key=${apiKey}&steamid=${userId}&count=1`;\r\n            const response = await fetch(endpoint);\r\n            const data = await response.json();\r\n            return data.response.games[0];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    User\r\n}","import React from 'react';\r\nimport { useSteamStatus } from './hooks/steamHooks';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst SteamCurrentlyPlayed = (props) => {\r\n    const steamSummary = useSteamStatus(props.steamDetails.id);\r\n\r\n    return <Typography variant='body1' align='center' gutterBottom>        \r\n        Steam Status: {steamSummary.personastate}\r\n    </Typography>\r\n}\r\n\r\nexport default SteamCurrentlyPlayed;","import  { useState, useEffect } from 'react';\r\nimport { User } from '../services/steam';\r\n\r\nfunction useSteamStatus(steamId) {\r\n  const [steamStatus, setSteamStatus] = useState({ personastate: '' });\r\n\r\n  useEffect(() => {\r\n    async function getPlayerSummary() {\r\n       const playerSummary = await User.GetUserSummary(steamId) \r\n       setSteamStatus(playerSummary);\r\n    };\r\n\r\n    getPlayerSummary();\r\n  }, [steamId])\r\n\r\n  useEffect(() => {\r\n    var interval = setInterval(async () => {\r\n      const playerSummary = await User.GetUserSummary(steamId);\r\n      setSteamStatus(_ => playerSummary);\r\n    }, 30000);\r\n\r\n    return () => {\r\n        clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  return steamStatus;\r\n}\r\n\r\nfunction useSteamMostRecentlyPlayed(steamId) {\r\n    const [steamMostRecentlyPlayed, setSteamMostRecentlyPlayed] = useState({\r\n      name: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n      async function getMostRecentlyPlayed() {\r\n        const mostRecentlyPlayedGame = await User.GetUserMostRecentGame(steamId);\r\n        setSteamMostRecentlyPlayed(_ => mostRecentlyPlayedGame);\r\n      };\r\n\r\n      getMostRecentlyPlayed();\r\n    }, [steamId])\r\n\r\n    useEffect(() => {\r\n      var interval = setInterval(async () => {\r\n        const mostRecentGame = await User.GetUserMostRecentGame(steamId);\r\n        setSteamMostRecentlyPlayed(_ => mostRecentGame);\r\n      }, 30000);\r\n  \r\n      return () => {\r\n          clearInterval(interval);\r\n      };\r\n    });\r\n  \r\n    return steamMostRecentlyPlayed;\r\n  }\r\n\r\nexport {\r\n    useSteamStatus,\r\n    useSteamMostRecentlyPlayed\r\n};","import React from 'react';\r\nimport { useSteamMostRecentlyPlayed } from './hooks/steamHooks';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst SteamMostRecentGame = (props) => {\r\n    const mostRecentGameInfo = useSteamMostRecentlyPlayed(props.steamDetails.id);\r\n\r\n    return <Typography variant='body1' align='center' gutterBottom>        \r\n        Last Played: {mostRecentGameInfo.name}  \r\n    </Typography>\r\n}\r\n\r\nexport default SteamMostRecentGame;","import React from \"react\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport SteamCurrentlyPlayed from './steamCurrentlyPlayed';\nimport SteamMostRecentGame from './steamMostRecentGame';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error);\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>\n        Error has occurred. {this.props.error}\n      </div>\n    }\n    return (\n      <Router>\n        <SteamCurrentlyPlayed steamDetails={this.props.steamDetails} />\n        <SteamMostRecentGame steamDetails={this.props.steamDetails} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst steamDetails = {\n    id: '76561198013038591'\n}\n\nReactDOM.render(<App steamDetails={steamDetails} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}