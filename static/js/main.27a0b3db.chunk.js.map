{"version":3,"sources":["services/steam.js","steamCurrentlyPlayed.jsx","App.js","serviceWorker.js","index.js"],"names":["steamPersonaState","1","3","0","User","userId","a","async","playerSummary","endpoint","process","fetch","response","json","data","players","userStatus","personastate","userSummary","undefined","gameid","gameextrainfo","SteamCurrentlyPlayed","props","useState","steamSummary","setSteamSummary","useEffect","steamDetails","id","getSteam","App","state","hasError","error","info","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAIMA,EAAoB,CACtBC,EAAG,SACHC,EAAG,OACHC,EAAG,WAGDC,EACc,SAAOC,GAAP,yBAAAC,EAAAC,OAAA,uDACRC,EAAgB,GADR,SAGFC,EAHE,UAXE,mDAWF,+BAVJ,KAUI,gBATLC,mCASK,qBAGkFL,GAHlF,WAAAC,EAAA,MAIeK,MAAMF,IAJrB,cAIFG,EAJE,kBAAAN,EAAA,MAKWM,EAASC,QALpB,OAKFC,EALE,OAMRN,EAAgBM,EAAKF,SAASG,QAAQ,GAN9B,qEAWNC,EAAahB,EAAkBQ,EAAcS,cAC/CC,EAAc,GAZN,KAcJF,EAdI,OAeH,WAfG,QAuBH,SAvBG,QA0BH,YA1BG,gCAiBAE,OADyBC,IAAzBX,EAAcY,OACH,kBAAcZ,EAAca,eAEzB,kBAnBd,oCAwBJH,EAAc,eAxBV,oCA2BJA,EAAc,kBA3BV,oCA8BJA,EAAc,kBA9BV,sDAkCLA,GAlCK,0DCWLI,EAnBc,SAACC,GAAW,IAAD,EACEC,mBAAS,QADX,mBAC/BC,EAD+B,KACjBC,EADiB,KAcpC,OAXAC,qBAAU,YACN,mBAAArB,EAAAC,OAAA,kEAAAD,EAAA,MAC2BF,EAAoBmB,EAAMK,aAAaC,KADlE,OACUjB,EADV,OAGIc,EAAgBd,GAHpB,qCAMAkB,KACD,IAGI,4CACUL,ICmBNM,E,YA7Bb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CAAEC,UAAU,GAFR,E,+EAKDC,EAAOC,GAEvBC,QAAQC,IAAIH,K,+BASZ,OAAII,KAAKN,MAAMC,SACN,oDACgBK,KAAKf,MAAMW,OAIlC,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAsBN,aAAcU,KAAKf,MAAMK,mB,gDAbrBM,GAE9B,MAAO,CAAED,UAAU,EAAMC,a,GAbXK,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,CAAKnB,aAJA,CACjBC,GAAI,uBAG6CmB,SAASC,eAAe,SD0HvE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27a0b3db.chunk.js","sourcesContent":["const userInterface = 'https://young-tor-50055.herokuapp.com/ISteamUser';\r\nconst version = 'v2';\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst steamPersonaState = {\r\n    1: 'online',\r\n    3: 'away',\r\n    0: 'offline',\r\n}\r\n\r\nconst User = {\r\n    GetUserSummary: async (userId) => {\r\n        let playerSummary = {};\r\n        try {\r\n            const endpoint = `${userInterface}/GetPlayerSummaries/${version}?key=${apiKey}&steamids=${userId}`;\r\n            const response = await fetch(endpoint);\r\n            const data = await response.json();\r\n            playerSummary = data.response.players[0];\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n\r\n        const userStatus = steamPersonaState[playerSummary.personastate];\r\n        let userSummary = '';\r\n\r\n        switch (userStatus) {\r\n            case 'online':\r\n                if (playerSummary.gameid !== undefined) {\r\n                    userSummary = `Playing ${playerSummary.gameextrainfo}`;\r\n                } else {\r\n                    userSummary = 'User is Online.'\r\n                }\r\n                \r\n                break;\r\n            case 'away': \r\n                userSummary = 'User is Away';\r\n                break;\r\n            case 'offline': \r\n                userSummary = 'User is Offline';\r\n                break;\r\n            default:\r\n                userSummary = 'User is nothing';\r\n                break;\r\n        }\r\n        \r\n        return userSummary;\r\n    }\r\n}\r\n\r\nexport {\r\n    User\r\n}","import React, { useEffect, useState} from 'react';\r\nimport { User } from './services/steam';\r\n\r\nconst SteamCurrentlyPlayed = (props) => {\r\n    let [steamSummary, setSteamSummary] = useState('Test');\r\n\r\n    useEffect(() => {\r\n        async function getSteam() {\r\n            const response = await User.GetUserSummary(props.steamDetails.id);\r\n\r\n            setSteamSummary(response);\r\n        }\r\n\r\n        getSteam();\r\n    }, []);\r\n\r\n\r\n    return <div>\r\n        Steam Game: {steamSummary}\r\n    </div>\r\n}\r\n\r\nexport default SteamCurrentlyPlayed;","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport SteamCurrentlyPlayed from './steamCurrentlyPlayed';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error);\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>\n        Error has occurred. {this.props.error}\n      </div>\n    }\n    return (\n      <Router>\n        <SteamCurrentlyPlayed steamDetails={this.props.steamDetails} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst steamDetails = {\n    id: '76561198013038591'\n}\n\nReactDOM.render(<App steamDetails={steamDetails} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}