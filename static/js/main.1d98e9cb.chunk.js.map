{"version":3,"sources":["utils/serviceWorkerMessenger.js","App.js","components/PeopleTable.js","components/PersonCreationForm.js","actions/getPeople.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","getSelectedPeople","sendPersonSelectedMessage","sendPersonUnselectedMessage","navigator","serviceWorker","ready","then","Promise","resolve","reject","controller","messageChannel","MessageChannel","port1","onmessage","event","data","error","postMessage","eventType","port2","person","App","props","_this","Object","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Git_Repos_Personal_flexera_techtest_front_end_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","refreshPeople","arguments","length","undefined","window","location","reload","GetPeople","people","setState","catch","result","console","log","setTimeout","personSelected","assign","state","find","p","Id","selected","personUnselected","sortPeople","sortBy","isSorting","sortDescending","sortedDescending","fetch","concat","global","config","apiUrl","skip","take","headers","Content-Type","response","json","selectedPeople","prevState","map","element","sortedBy","pageForward","newSkip","pageBackward","deletePerson","personId","method","updatePerson","toast","personToUpdate","body","JSON","stringify","status","onTableEdited","change","previousState","previousPeople","indexOfPreviousPerson","previousPerson","index","newPerson","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","disabled","style","display","_components_PeopleTable__WEBPACK_IMPORTED_MODULE_8__","sortByEmail","sortByName","_components_PersonCreationForm__WEBPACK_IMPORTED_MODULE_9__","react_toastify__WEBPACK_IMPORTED_MODULE_11__","Component","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","PeopleTable","_ref","arrow","nameHeader","emailHeader","aria-label","cursor","backgroundColor","onClick","key","onChange","Name","target","value","type","defaultValue","Age","Balance","Email","Address","role","justifyContent","marginTop","PersonCreationForm","createPerson","handleInput","_this2","inputStyle","marginLeft","id","name","_utils_serviceWorkerMessenger__WEBPACK_IMPORTED_MODULE_0__","getPeople","register","isLocalhost","Boolean","hostname","match","URL","process","href","origin","addEventListener","swUrl","contentType","get","indexOf","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","r","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_3__","_serviceWorker__WEBPACK_IMPORTED_MODULE_4__","ReactDOM","render","document","getElementById","err"],"mappings":"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","file":"static/js/main.1d98e9cb.chunk.js","sourcesContent":["/// Ensure service worker is ready to be interacted with and then ask it for the cache of selected people\r\nexport const getSelectedPeople =  function () {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return new Promise(function(resolve, reject){\r\n            if(navigator.serviceWorker.controller) {\r\n                // Create a Message Channel\r\n                var messageChannel = new MessageChannel();\r\n                    \r\n                // Handler for recieving message reply from service worker\r\n                messageChannel.port1.onmessage = function(event){\r\n                    if(event.data.error){\r\n                        reject(event.data.error);\r\n                    }else{\r\n                        resolve(event.data);\r\n                    }\r\n                };\r\n\r\n                // Send message to service worker along with port for reply\r\n                navigator.serviceWorker.controller.postMessage({\r\n                    eventType: 'getSelectedPeople'\r\n                }, [messageChannel.port2]);\r\n            } else {\r\n                reject('Controller not ready');\r\n            }\r\n            \r\n        });\r\n    });\r\n}\r\n\r\n/// Tell service worker a new person has been selected\r\nexport const sendPersonSelectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personSelected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n    \r\n}\r\n\r\n/// Tell service worker a person has been unselected\r\nexport const sendPersonUnselectedMessage = function(person) {\r\n    return new Promise(function(resolve) {\r\n        navigator.serviceWorker.controller.postMessage({\r\n            eventType: 'personUnselected',\r\n            person: person\r\n        });\r\n\r\n        resolve('Message Sent');\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { getSelectedPeople, sendPersonSelectedMessage, sendPersonUnselectedMessage } from './utils/serviceWorkerMessenger'\r\nimport PeopleTable from './components/PeopleTable'\r\nimport PersonCreationForm from './components/PersonCreationForm'\r\nimport GetPeople from './actions/getPeople'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            people: undefined,\r\n            sortedBy: 'name',\r\n            sortedDescending: false,\r\n            skip: 0,\r\n            take: 10,\r\n            isSorting: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshPeople();\r\n    }\r\n\r\n    /// This works as the initial get of all people and for refreshing the table after additions and deletions\r\n    refreshPeople = (refreshPage = false) => {\r\n        if (refreshPage === true) {\r\n            window.location.reload(false); \r\n        }\r\n        GetPeople().then((people) => {\r\n            this.setState({\r\n                people: people\r\n            });\r\n        }).catch((result) => {\r\n            /// Service worker controller either hasn't registered yet or won't register (Hard refresh) so start over again and refresh page just to be safe \r\n            console.log(result);\r\n            setTimeout(() => { this.refreshPeople(true) }, 1000);\r\n        });;\r\n    }\r\n\r\n    /// Component handler for marking a person as selected using utility method from serviceWorkerMessenger\r\n    personSelected = (person) => {\r\n        sendPersonSelectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = true;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    /// Component handler for marking a person as selected using utility method from serviceWorkerMessenger\r\n    personUnselected = (person) => {\r\n        sendPersonUnselectedMessage(person).then((result) => {\r\n            let previousState  = Object.assign({}, this.state);\r\n            let people = previousState.people;\r\n            let unselectedPerson = people.find((p) => p.Id === person.Id);\r\n            unselectedPerson.selected = false;\r\n            this.setState({\r\n                people: people\r\n            })\r\n        })\r\n    }\r\n\r\n    /// Make call to get people but with sorting parameters, use whatever skip and take were set last\r\n    sortPeople = (sortBy) => {\r\n        if (this.state.isSorting === false) {\r\n            this.setState({ isSorting: true });\r\n\r\n            const sortDescending = this.state.sortedDescending === true ? false : true;\r\n\r\n            fetch(`${global.config.apiUrl}/people?sortBy=${sortBy}&sortDescending=${sortDescending}&skip=${this.state.skip}&take=${this.state.take}`, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((response) => {\r\n                return response.json();\r\n            }).then((result) => {\r\n                getSelectedPeople().then((selectedPeople) => {\r\n                    this.setState(prevState => {\r\n                        return {\r\n                            people: result.map((person) => {\r\n                                person.selected = selectedPeople.find((element) => {\r\n                                    return element.Id === person.Id;\r\n                                });\r\n                                return person;\r\n                            }),\r\n                            sortedBy: sortBy,\r\n                            sortedDescending: prevState.sortedBy !== sortBy ? false : sortDescending,\r\n                            isSorting: false\r\n                        }\r\n                    });\r\n                }).catch((result) => {\r\n                    console.log(result);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /// Get next 10 people\r\n    pageForward = () => {\r\n        const newSkip = this.state.skip + 10;\r\n\r\n        fetch(`${global.config.apiUrl}/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState(prevState => {\r\n                    return {\r\n                        people: result.map((person) => {\r\n                            person.selected = selectedPeople.find((element) => {\r\n                                return element.Id === person.Id;\r\n                            });\r\n                            return person;\r\n                        }),\r\n                        skip: newSkip\r\n                    };\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /// Get last 10 people, do not allow the user to go back from 0\r\n    pageBackward = () => {\r\n        const newSkip = this.state.skip === 0 ? 0 : this.state.skip - 10;\r\n\r\n        fetch(`${global.config.apiUrl}/people?sortBy=${this.state.sortedBy}&sortDescending=${this.state.sortedDescending}&skip=${newSkip}&take=${this.state.take}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((result) => {\r\n            getSelectedPeople().then((selectedPeople) => {\r\n                this.setState({\r\n                    people: result.map((person) => {\r\n                        person.selected = selectedPeople.find((element) => {\r\n                            return element.Id === person.Id;\r\n                        });\r\n                        return person;\r\n                    }),\r\n                    skip: newSkip\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /// Delete a Person and refresh the table\r\n    deletePerson = (personId) => {\r\n        fetch(`${global.config.apiUrl}/people/${personId}`, {\r\n            method: 'DELETE'\r\n        }).then((result) => {\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    /// Update a Persons details, don't refresh the table, if something goes wrong, handle it in the catch.\r\n    updatePerson = (personId) => {\r\n        toast('Updating Person');\r\n        const personToUpdate = this.state.people.find(person => person.Id === personId);\r\n\r\n        fetch(`${global.config.apiUrl}/people/${personId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(personToUpdate),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).then((response) => {\r\n            if (response.status === 204) {\r\n                toast('Person Updated');\r\n            }\r\n        }).catch((result) => {\r\n            console.log(result);\r\n        });\r\n    }\r\n\r\n    /// Handle all values in the table being edited\r\n    onTableEdited = (person, change) => {\r\n        this.setState((previousState) => {\r\n            const previousPeople = previousState.people;\r\n\r\n            let indexOfPreviousPerson = 0;\r\n            const previousPerson = previousPeople.find((element, index) => { \r\n                indexOfPreviousPerson = index;\r\n                return element.Id === person.Id\r\n            });\r\n\r\n            const newPerson = Object.assign({}, previousPerson, change);\r\n            previousPeople[indexOfPreviousPerson] = newPerson;\r\n\r\n            return Object.assign({}, previousState);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <div>Tech Test</div>\r\n                </header>\r\n                <div disabled={true} style={{ display: 'flex' }}>\r\n                    <div>\r\n                        <PeopleTable \r\n                            people={this.state.people} \r\n                            personSelected={this.personSelected} \r\n                            personUnselected={this.personUnselected} \r\n                            sortPeople={this.sortPeople}\r\n                            sortByEmail={this.sortByEmail} \r\n                            sortByName={this.sortByName} \r\n                            sortedBy={this.state.sortedBy}\r\n                            sortedDescending={this.state.sortedDescending}\r\n                            pageForward={this.pageForward} \r\n                            pageBackward={this.pageBackward}\r\n                            deletePerson={this.deletePerson}\r\n                            onTableEdited={this.onTableEdited}\r\n                            updatePerson={this.updatePerson} />\r\n                    </div>\r\n                    <PersonCreationForm refreshPeople={this.refreshPeople} />\r\n                </div>\r\n                <ToastContainer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PeopleTable = function({ people, personSelected, personUnselected, sortPeople, sortedBy, sortedDescending, pageForward, pageBackward, deletePerson, onTableEdited, updatePerson }) {\r\n\r\n    const arrow = sortedDescending === true ? <span>&#8595;</span> : <span>&#8593;</span>;\r\n\r\n    const nameHeader = sortedBy === 'name' ? <span>Name {arrow}</span> : <span>Name</span>;\r\n    const emailHeader = sortedBy === 'email' ? <span>Email {arrow}</span> : <span>Email</span>;\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th aria-label='nameHeader' style={{ cursor: 'pointer', backgroundColor: 'LightGray'  }} onClick={() => { sortPeople('name') }}>{nameHeader}</th>\r\n                        <th>Age</th>\r\n                        <th>Balance</th>\r\n                        <th aria-label='emailHeader' style={{ cursor: 'pointer', backgroundColor: 'LightGray'  }} onClick={() => { sortPeople('email') }}>{emailHeader}</th>\r\n                        <th>Address</th>\r\n                    </tr>\r\n                    {\r\n                        people === undefined ? null :\r\n                        people.map((person) => {\r\n                            return (\r\n                                <tr key={person.Id}>\r\n                                    <td><input onChange={event => onTableEdited(person, { Name: event.target.value })} type='text' defaultValue={person.Name} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Age: event.target.value })} type='number' defaultValue={person.Age} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Balance: event.target.value })} type='number' defaultValue={person.Balance} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Email: event.target.value })} type='text' defaultValue={person.Email} /></td>\r\n                                    <td><input onChange={event => onTableEdited(person, { Address: event.target.value })} type='text' defaultValue={person.Address} /></td>\r\n                                    <td>\r\n                                        {\r\n                                            person.selected ? <span style={{ cursor: 'pointer'  }} onClick={() => { personUnselected(person) }} role='img' aria-label='Minus sign'>&#10134;</span> : \r\n                                                <span style={{ cursor: 'pointer'  }} onClick={() => { personSelected(person)}} role='img' aria-label='Plus sign'>&#10133;</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td><button style={{ cursor: 'pointer' }} onClick={() => updatePerson(person.Id)}>Update Person</button></td>\r\n                                    <td><button style={{ cursor: 'pointer' }} onClick={() => deletePerson(person.Id)}>Delete Person</button></td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 3 }}>\r\n                <button style={{ cursor: 'pointer'  }} onClick={pageBackward}>\r\n                    &#8592; Page Backward\r\n                </button>\r\n                <button style={{ cursor: 'pointer'  }} onClick={pageForward}>\r\n                     Page Forward &#8594;\r\n                </button>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nPeopleTable.propTypes = {\r\n    people: PropTypes.array,\r\n    personSelected: PropTypes.func.isRequired,\r\n    personUnselected: PropTypes.func.isRequired,\r\n    sortPeople: PropTypes.func.isRequired,\r\n    sortedBy: PropTypes.string.isRequired,\r\n    sortedDescending: PropTypes.bool.isRequired,\r\n    pageForward: PropTypes.func.isRequired,\r\n    pageBackward: PropTypes.func.isRequired,\r\n    deletePerson: PropTypes.func.isRequired,\r\n    onTableEdited: PropTypes.func.isRequired,\r\n    updatePerson: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PeopleTable;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\n\r\nclass PersonCreationForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            Name: '',\r\n            Email: '',\r\n            Address: '',\r\n            Balance: 0,\r\n            Age: 0\r\n        }\r\n\r\n        this.refreshPeople = props.refreshPeople;\r\n    }\r\n\r\n    /// Create a new person and refresh the table\r\n    createPerson = () => {\r\n        toast('Creating Person');\r\n        fetch(`${global.config.apiUrl}/people`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).then((result) => {\r\n            toast('Person Created');\r\n            console.log(result);\r\n            this.refreshPeople();\r\n        })\r\n    }\r\n\r\n    /// Handle input from Person into form\r\n    handleInput = (change) => {\r\n        this.setState((previousState) => {\r\n            return Object.assign({}, previousState, change);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const inputStyle = {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginTop: 5\r\n        };\r\n\r\n        return (\r\n            <div style={{ marginTop: 50, marginLeft: 50 }}>\r\n                <span id='formTitle'>Person Creation Form</span>\r\n                <div>\r\n                    <label style={inputStyle}>\r\n                        Name:\r\n                        <input onChange={event => this.handleInput({ Name: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"name\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Email:\r\n                        <input onChange={event => this.handleInput({ Email: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"email\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Address:\r\n                        <input onChange={event => this.handleInput({ Address: event.target.value })} style={{ marginLeft: 5 }} type=\"text\" name=\"address\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Balance:\r\n                        <input onChange={event => this.handleInput({ Balance: event.target.value })} style={{ marginLeft: 5 }} type=\"number\" name=\"balance\" />\r\n                    </label>\r\n                    <label style={inputStyle}>\r\n                        Age:\r\n                        <input onChange={event => this.handleInput({ Age: event.target.value })} style={inputStyle} type=\"number\" name=\"age\" />\r\n                    </label>\r\n                    <input type=\"submit\" name=\"name\" onClick={this.createPerson} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPersonCreationForm.propTypes = {\r\n    refreshPeople: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PersonCreationForm;","import { getSelectedPeople } from '../utils/serviceWorkerMessenger'\r\n\r\nconst getPeople = () => {\r\n    return navigator.serviceWorker.ready.then(() => {\r\n        return fetch('https://tech-test.azurewebsites.net/people', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((people) => {\r\n            return getSelectedPeople().then((selectedPeople) => {\r\n                return people.map((person) => {\r\n                    person.selected = selectedPeople.find((element) => {\r\n                        return element.Id === person.Id;\r\n                    });\r\n                    return person;\r\n                });\r\n            });\r\n        });\r\n    });\r\n    \r\n}\r\n\r\nexport default getPeople;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nglobal.config = {};\n\nfetch(`config.json`)\n  .then(response => response.json())\n  .then(json => {\n    global.config = json;    \n    ReactDOM.render(<App />, document.getElementById('root'));\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\n\nserviceWorker.register();\n"],"sourceRoot":""}